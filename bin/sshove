#! /bin/sh

script="$0";
argc=$#;
argv=$*;

# Make sure we won't exit automatically on errors.
set +e;

# Set up some readonly helper variables.
# Create a readonly variable with the name of this programs so that we can
# easily rename it it will.
readonly program='sshove';
readonly space=' ';
readonly tab='	';
readonly newline='
';
readonly pid=$$;
readonly IFS_default="${space}${tab}${newline}";
readonly upper='ABCDEFGHIJKLMNOPQRSTUVWXYZ';
readonly lower='abcdefghijklmnopqrstuvwxyz';
readonly number='0123456789';

# Set IFS just to make sure that it is sane.
IFS="${IFS_default}";

# Set $LC_CTYPE to something sane if it is not already defined as tr complains
# on OSX if it is not set.
LC_CTYPE=${LC_CTYPE:-'C'};

# rpath provides the same basic function as the realpath command, but with a
# few benefits:
#   realpath does not exist on some systems (Mac OSX).
#   rpath is 100 times faster becuase we never spawn a subshell. :)
rpath() {
  # This is the name of the variable where we get our data.
  rpath_src=${1};

  # This is the name of the variable where we put our data.  If a second
  # argument was not provided, we will update the the source variable.
  rpath_dst=${2:-${1}};

  # Grab the value from our source.
  eval rpath_value=\$${rpath_src};

  # Eval it again to allow shell expansion to occur (~ becomes /home/user).
  eval rpath_value=${rpath_value};

  rpath_name=${rpath_value##*/};
  rpath_dir=${rpath_value%/*};
  
  if cd "${rpath_dir}" 2>/dev/null; then
    # We know the real path.
    eval $rpath_dst=${rpath_dir}/${rpath_name};
  else
    # We couldn't determine the real path, so we use the shell expanded value
    # which is what the realpath binary does.
    eval $rpath_dst=$rpath_value;
  fi;
}

# 'where' is a more efficent 'which' function.  Testing shows it is about 40x
# faster that spawning a subshell to call which.
where() {
  # The first argument is the name of the variable to update with the full path.
  where_var=$1;

  # The second argument is the name of the command to locate.  If it is not
  # provided, use the current value of the variable we are going to update.
  if [ -n "${2}" ]; then
    where_cmd=${2};
  else
    eval where_cmd=\$$where_cmd;
  fi;

  IFS=":"; set -- ${PATH}; IFS=${IFS_default};
  for where_dir in $*; do
    where_file=${where_dir}/${where_cmd};
    if [ -x "${where_file}" ]; then
      eval $where_var=${where_file};
      return 0;
    fi;
  done;

  return 1;
}

# Create a generic function to generate a pseudo random string.  The default
# solaris tr doesn't seem to support charater sets, so all charaters must be
# manually listed out.  It also freaks out with many binary charaters, so we
# limit the input with strings.
randstr() {
  # Name of the variable where we will store our random string.
  randstr_var=${1};

  # Length of the random string we need to generate.
  randstr_len=${2};

  tr -cd "${upper}:${lower}:${number}" < /dev/urandom | \
  dd of="${tmpdir}/read.${pid}" count=1 bs=${randstr_len} 2>/dev/null
  read randstr_val < "${tmpdir}/read.${pid}";
  rm "${tmpdir}/read.${pid}";

  eval $randstr_var=$randstr_val;
  return 0;
}

agent() {
  SSH_AUTH_SOCK=${SSH_AUTH_SOCK:=${sshagent_socket}};
  export SSH_AUTH_SOCK;

  ${sshagent_command} -a "${sshagent_socket}" >/dev/null 2>&1;
  if ! "${sshadd_command}" -l >/dev/null 2>&1; then
    "${sshadd_command}";
  fi;
}

# If we can't stat $script_path, it must have come from $PATH.  Let's find
# where we live.
if ! [ -x "${script}" ]; then
  where script_path "${script}";
else
  rpath script script_path;
fi;
script_dir=${script_path%/*};
script_name=${script_path##*/};
prefix=${script_dir%/*};

# Locate $config_base and load our config file.
for dir in ~/.ssh ~/etc "${prefix}/etc"; do
  dir="${dir}/.${program}";
  if [ -d "${dir}" ]; then
    if [ -r "${dir}/${program}.conf" ]; then
      . "${dir}/${program}.conf";
    fi;

    if [ -w "${dir}" ]; then
      config_base=${config_base:-${dir}};
    fi;
  fi;
done;
config_base=${config_base:-"~/.ssh/${program}"};
rpath config_base;

# Apply our defaults if a value was not found in the config file.
ssh_command=${ssh_command:-'ssh'};
tmpdir=${tmpdir:-"${config_base}/tmp"};
source_path=~;
rsync_command=${rsync_command:-'rsync'};
rsync_logfile=${rsync_logfile:-"${tmpdir}/rsync.log"};
rsync_options=${rsync_options:-'-auq'};
include_file=${include_file:-"${config_base}/include"};
exclude_file=${exclude_file:-"${config_base}/exclude"};
rsyncd_config=${rsyncd_config:-"${tmpdir}/rsyncd.conf"};
rsyncd_passwd=${rsyncd_passwd:-"${tmpdir}/rsyncd.passwd"};
rsyncd_pidfile=${rsyncd_pidfile:-"${tmpdir}/rsyncd.pid"};
rsyncd_port=${rsyncd_port:-'1897'};
rsync_filter=${rsync_filter:-"${tmpdir}/rsync.filter"};
rsync_dirfilter=${rsync_dirfilter:-".${program}.filter"};
sshagent_command=${sshagent_comand:='ssh-agent'};
sshagent_socket=${sshagent_socket:=${tmpdir}/.ssh-agent.sock};
sshadd_command=${sshadd_comand:=ssh-add};
use_sshagent=${use_sshagent:-1};

# If we have anything other than exactly 1 argument, then just call ssh as we
# we don't know what arguments might be necessary to preform our rsync.
if [ "${argc}" != '1' ]; then
  exec "${ssh_command}" ${argv};
  exit 0;
fi;

# Clean up our paths.
for var in source_path tmpdir rsync_logfile include_file exclude_file \
    rsyncd_config rsyncd_passwd rsyncd_pidfile rsync_filter sshagent_socket; do
  rpath $var;
done

# Make sure ssh-agent is running
if [ "${use_sshagent}" = '1' ]; then
  agent;
fi;

# Make sure our $config_base and $tmpdir exist. 
for var in config_base tmpdir; do
  eval dir=\$$var;
  if ! [ -d "${dir}" ]; then
    if ! mkdir -m 700 "${dir}"; then
      echo "error: '${dir}' does not exist and could not be created" >&2;
    fi;
  fi;
done;

# We wait to set these as 'randstr' needs the tmpdir to exist .
[ -z "${rsyncd_user}" ] && randstr rsyncd_user 8;
[ -z "${rsyncd_pass}" ] && randstr rsyncd_pass 8;

# Generate our system filters. Start by defining out per-directory filter file.
filters="dir-merge ${rsync_dirfilter}${newline}";

# We always exclude our tmp directory and files.
for name in tmpdir rsyncd_pidfile rsyncd_config rsyncd_passwd rsync_filter; do
  # Strip off our prefix.
  eval value=\$$name; value="${value#${source_path}}";

  # Add this to our excludes.
  filters="${filters}- ${value}${newline}";
done

# Create our _filters files
echo "${filters}" > "${rsync_filter}" 2>/dev/null;

case "`uname`" in
  # cygwin is a special case because multiplexing does not work.
  [Cc][Yy][Gg][Ww][Ii][Nn]*)
    mode=simple;
  ;;
esac;

case "`${ssh_command} -V 2>&1`" in
  # Sun SSH does not support multiplexing
  [Ss][Uu][Nn]*)
    mode=simple;
  ;;
esac;
  
case "${mode}" in
  [Ss][Ii][Mm][Pp][Ll][Ee])
    # Start out by adding the rsync_filter file.
    filters='';
    if [ -r "${rsync_filter}" ]; then
      filters="  filter = . ${rsync_filter}";
    fi;

    # Now we add in our customer include and exclude files if they are defined.
    if [ -r "${include_file}" ]; then
      filters="${filters}${newline}  include from = ${include_file}";
    fi;
    if [ -r "${exclude_file}" ]; then
      filters="${filters}${newline}  exclude from = ${exclude_file}";
    fi;   
    
    # Finally, add in a default exclude.
    filters="${filters}${newline}  exclude = /*";
    
    # Create our rsyncd configuration/
    cat << __EOF__ > "${rsyncd_config}";
address = 127.0.0.1
use chroot = yes
max connections = 1
pid file = ${rsyncd_pidfile}

[${program}]
  path = ${source_path}
  list = false
  read only = yes
  auth users = ${rsyncd_user}
  secrets file = ${rsyncd_passwd}
${filters}
  post-xfer exec = kill \`cat "${rsyncd_pidfile}"\`
__EOF__

    # Make sure our passwd file is up to date and secure.
    echo "${rsyncd_user}:${rsyncd_pass}" > "${rsyncd_passwd}";
    chmod 600 "${rsyncd_passwd}";

    # Fire up rsync in daemon mode.
    "${rsync_command}" --daemon --config="${rsyncd_config}" \
    --port="${rsyncd_port}" --no-detach &
    rsyncd_pid="${!}";

    "${ssh_command}" -R "127.0.0.1:${rsyncd_port}:127.0.0.1:${rsyncd_port}" -t $argv 'RSYNC_PASSWORD="'${rsyncd_pass}'" rsync '${rsync_options}' rsync://'${rsyncd_user}'@127.0.0.1:'${rsyncd_port}'/'${program}'/ ./ & exec "${SHELL}" -l';

    # Shut down the rsyncd process if it is still around...
    kill "${rsyncd_pid}";
  ;;

  *)
    # Start out by adding the rsync_filter file.
    filters='';
    if [ -r "${rsync_filter}" ]; then
      filters="--filter='. ${rsync_filter}'";
    fi;

    # Now we add in our customer include and exclude files if they are defined.
    if [ -r "${include_file}" ]; then
      filters="${filters} --include-from='${include_file}'";
    fi;
    if [ -r "${exclude_file}" ]; then
      filters="${filters} --exclude-from='${exclude_file}'";
    fi;   
    
    # Finally, add in a default exclude.
    filters="${filters} --exclude='/*'";

    # Set up a host specific contol file.
    control="${tmpdir}/%r@%h-${pid}.sock";

    "${ssh_command}" -o ControlMaster=auto -o ControlPath="${control}" -o PermitLocalCommand=yes -o LocalCommand="${rsync_command} ${rsync_options} ${filters} --rsh '${ssh_command} -o ControlPath=\"${control}\"' '${source_path}/' '%r@%h:' &" $argv;
  ;;
esac;
